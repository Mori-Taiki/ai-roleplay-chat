// <auto-generated />
using System;
using AiRoleplayChat.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backend.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250815020018_AddAppearanceAndUserAppellation")]
    partial class AddAppearanceAndUserAppellation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("AiRoleplayChat.Backend.Domain.Entities.CharacterProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Appearance")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarImageUrl")
                        .HasMaxLength(2083)
                        .HasColumnType("TEXT");

                    b.Property<string>("Backstory")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExampleDialogue")
                        .HasColumnType("JSON");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSystemPromptCustomized")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Personality")
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemPrompt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tone")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAppellation")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CharacterProfiles");
                });

            modelBuilder.Entity("AiRoleplayChat.Backend.Domain.Entities.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharacterProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("DATETIME(6)");

                    b.Property<string>("ImagePrompt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("MEDIUMTEXT");

                    b.Property<string>("ModelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("DATETIME(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterProfileId");

                    b.HasIndex("SessionId", "Timestamp")
                        .HasDatabaseName("IX_ChatMessages_SessionId_Timestamp");

                    b.HasIndex("SessionId", "UserId", "Sender", "Timestamp")
                        .HasDatabaseName("IX_ChatMessages_SessionId_UserId_Sender_Timestamp");

                    b.HasIndex("UserId", "CharacterProfileId", "SessionId", "CreatedAt")
                        .HasDatabaseName("IX_ChatMessages_User_Character_Session_CreatedAt");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("AiRoleplayChat.Backend.Domain.Entities.ChatSession", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<int>("CharacterProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME(6)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("DATETIME(6)");

                    b.Property<string>("Metadata")
                        .HasColumnType("JSON");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("DATETIME(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterProfileId");

                    b.HasIndex("UserId", "CharacterProfileId", "StartTime")
                        .HasDatabaseName("IX_ChatSessions_User_Character_StartTime");

                    b.ToTable("ChatSessions");
                });

            modelBuilder.Entity("AiRoleplayChat.Backend.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("B2cObjectId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME(6)");

                    b.HasKey("Id");

                    b.HasIndex("B2cObjectId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AiRoleplayChat.Backend.Domain.Entities.UserSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "ServiceType", "SettingKey")
                        .IsUnique();

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("AiRoleplayChat.Backend.Domain.Entities.ChatMessage", b =>
                {
                    b.HasOne("AiRoleplayChat.Backend.Domain.Entities.CharacterProfile", "CharacterProfile")
                        .WithMany()
                        .HasForeignKey("CharacterProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AiRoleplayChat.Backend.Domain.Entities.ChatSession", "Session")
                        .WithMany("Messages")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterProfile");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("AiRoleplayChat.Backend.Domain.Entities.ChatSession", b =>
                {
                    b.HasOne("AiRoleplayChat.Backend.Domain.Entities.CharacterProfile", "CharacterProfile")
                        .WithMany()
                        .HasForeignKey("CharacterProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterProfile");
                });

            modelBuilder.Entity("AiRoleplayChat.Backend.Domain.Entities.UserSetting", b =>
                {
                    b.HasOne("AiRoleplayChat.Backend.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AiRoleplayChat.Backend.Domain.Entities.ChatSession", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
