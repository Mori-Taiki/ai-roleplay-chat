// <auto-generated />
using System;
using AiRoleplayChat.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250416003703_AddUsersTable")]
    partial class AddUsersTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AiRoleplayChat.Backend.Domain.Entities.CharacterProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarImageUrl")
                        .HasMaxLength(2083)
                        .HasColumnType("varchar(2083)");

                    b.Property<string>("Backstory")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExampleDialogue")
                        .HasColumnType("JSON");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSystemPromptCustomized")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Personality")
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemPrompt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tone")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CharacterProfiles");
                });

            modelBuilder.Entity("AiRoleplayChat.Backend.Domain.Entities.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME(6)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("DATETIME(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterProfileId");

                    b.HasIndex("SessionId", "Timestamp")
                        .HasDatabaseName("IX_ChatMessages_SessionId_Timestamp");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("AiRoleplayChat.Backend.Domain.Entities.ChatSession", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<int>("CharacterProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME(6)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("DATETIME(6)");

                    b.Property<string>("Metadata")
                        .HasColumnType("JSON");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("DATETIME(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterProfileId");

                    b.HasIndex("UserId", "CharacterProfileId", "StartTime")
                        .HasDatabaseName("IX_ChatSessions_User_Character_StartTime");

                    b.ToTable("ChatSessions");
                });

            modelBuilder.Entity("AiRoleplayChat.Backend.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("B2cObjectId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME(6)");

                    b.HasKey("Id");

                    b.HasIndex("B2cObjectId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AiRoleplayChat.Backend.Domain.Entities.ChatMessage", b =>
                {
                    b.HasOne("AiRoleplayChat.Backend.Domain.Entities.CharacterProfile", "CharacterProfile")
                        .WithMany()
                        .HasForeignKey("CharacterProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AiRoleplayChat.Backend.Domain.Entities.ChatSession", "Session")
                        .WithMany("Messages")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterProfile");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("AiRoleplayChat.Backend.Domain.Entities.ChatSession", b =>
                {
                    b.HasOne("AiRoleplayChat.Backend.Domain.Entities.CharacterProfile", "CharacterProfile")
                        .WithMany()
                        .HasForeignKey("CharacterProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterProfile");
                });

            modelBuilder.Entity("AiRoleplayChat.Backend.Domain.Entities.ChatSession", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
